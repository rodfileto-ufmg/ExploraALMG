---
title: "Explorando dados abertos da ALMG"
engine: jupyter
lang: pt
author: "Rodrigo Fileto"
format:
  html:
    theme:
      light: flatly
      dark: darkly
    toc: true    
    number-sections: true
    other-links:
      - text: NASA Open Data
        href: https://data.nasa.gov/
    code-links:
      - text: Data Import Code
        icon: file-code
        href: data-import.py
---

Seja bem vindo! Neste conjunto de documentos vamos explorar a plataforma de dados abertos da Assembléia Legislativa de Minas Gerais (ALMG).

# Importação dos dados das proposições legislativas

Vejamos primeiro como exportar os dados. Para este projeto utilizei especificamente o conjunto de arquivos de proposições em formato csv disponibilizados na plataforma da ALMG. Os arquivos foram acessados e carregados em banco de dados no formato sqlite3, o qual pode ser acessado posteriormente em diversas ferramentas para análise, tais como o python e o R.

::: {.panel-tabset}

## Python {.active}
``` {.python}
import requests
import pandas as pd
import sqlite3
from io import StringIO

def baixar_arquivo_em_memoria(ano):
    print(f"Baixando arquivos de proposições para o ano de {ano}")
    url = f"https://dadosabertos.almg.gov.br/arquivo/proposicoes/download?ano={ano}&tipo=CSV"
    response = requests.get(url)
    response.raise_for_status()
    print(f"Arquivo de {ano} baixado com sucesso na memória")
    return response.text

def carregar_csv_no_sqlite(ano, conn, tabela_nome='proposicoes'):
    csv_text = baixar_arquivo_em_memoria(ano)
    df = pd.read_csv(StringIO(csv_text))
    # Opcional: adicionar uma coluna com o ano para identificar a origem
    df['ano_arquivo'] = ano
    df.to_sql(tabela_nome, conn, if_exists='append', index=False)
    print(f"Dados do ano {ano} adicionados na tabela '{tabela_nome}'")

conn = sqlite3.connect('proposicoes.db')
anos = range(1980,2026)
for ano in anos:
    carregar_csv_no_sqlite(ano, conn)
conn.close()
```


## R

``` {.r}
library(httr)
library(readr)
library(DBI)
library(RSQLite)
library(dplyr)

baixar_arquivo_em_memoria <- function(ano) {
  message(sprintf("Baixando arquivos de proposições para o ano de %d", ano))
  url <- sprintf("https://dadosabertos.almg.gov.br/arquivo/proposicoes/download?ano=%d&tipo=CSV", ano)
  response <- GET(url)
  
  if (http_error(response)) {
    stop("Erro ao baixar o arquivo: ", status_code(response))
  }
  
  message(sprintf("Arquivo de %d baixado com sucesso na memória", ano))
  content(response, "text", encoding = "UTF-8")
}

carregar_csv_no_sqlite <- function(ano, conn, tabela_nome = "proposicoes") {
  csv_text <- baixar_arquivo_em_memoria(ano)
  
  df <- read_csv(I(csv_text), show_col_types = FALSE)
  
  # Opcional: adicionar coluna com o ano
  df <- df %>%
    mutate(ano_arquivo = ano)
  
  dbWriteTable(conn, tabela_nome, df, append = TRUE)
  
  message(sprintf("Dados do ano %d adicionados na tabela '%s'", ano, tabela_nome))
}

# Conectar ao banco SQLite
conn <- dbConnect(RSQLite::SQLite(), "proposicoes.db")

# Iterar sobre os anos
anos <- 1980:2025
for (ano in anos) {
  carregar_csv_no_sqlite(ano, conn)
}

# Fechar conexão
dbDisconnect(conn)

```
:::

# Exploração Inicial dos dados


```{python}
#| echo: false

import pandas as pd
import sys
import os
import sqlite3

# Adiciona a raiz do projeto ao sys.path
sys.path.append(os.path.abspath(os.path.join(os.getcwd(), '..')))

from funcoes.Figures import create_horizontal_bar_chart_go

# Caminho para o database.db na raiz do projeto
db_path = os.path.abspath(os.path.join(os.getcwd(), '../database.db'))

# Conecta ao banco na raiz do projeto
conn = sqlite3.connect(db_path)

df = pd.read_sql_query(f"SELECT * FROM proposicoes", conn)

nr_proposicoes = len(df)

# Fechar conexão
conn.close()


```

Delimitei para esta análise inicial o período de 1980-2025 resultando na coleta de `{python} nr_proposicoes`

`{python} "hello"`
