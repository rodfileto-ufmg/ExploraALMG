{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Explorando dados abertos da ALMG\"\n",
        "repo-url: https://github.com/rodfileto-ufmg/ExploraALMG\n",
        "engine: jupyter\n",
        "lang: pt\n",
        "author: \"Rodrigo Fileto\"\n",
        "format:\n",
        "  html:\n",
        "    link-external-newwindow: true\n",
        "    code-fold: true\n",
        "    theme:\n",
        "      light: flatly\n",
        "      dark: darkly\n",
        "    toc: true    \n",
        "    number-sections: true\n",
        "    other-links:\n",
        "      - text: Dados Abertos da ALMG\n",
        "        href: https://dadosabertos.almg.gov.br\n",
        "    code-links: repo  \n",
        "---\n",
        "\n",
        "\n",
        "Seja bem vindo! Neste conjunto de documentos vamos explorar a plataforma de dados abertos da Assembléia Legislativa de Minas Gerais (ALMG).\n",
        "\n",
        "# Importação dos dados das proposições legislativas\n",
        "\n",
        "Vejamos primeiro como exportar os dados. Para este projeto utilizei especificamente o conjunto de arquivos de proposições em formato csv disponibilizados na plataforma da ALMG. Os arquivos foram acessados e carregados em banco de dados no formato sqlite3, o qual pode ser acessado posteriormente em diversas ferramentas para análise, tais como o python e o R.\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "## Python {.active}\n",
        "``` {.python}\n",
        "import requests\n",
        "import pandas as pd\n",
        "import sqlite3\n",
        "from io import StringIO\n",
        "\n",
        "def baixar_arquivo_em_memoria(ano):\n",
        "    print(f\"Baixando arquivos de proposições para o ano de {ano}\")\n",
        "    url = f\"https://dadosabertos.almg.gov.br/arquivo/proposicoes/download?ano={ano}&tipo=CSV\"\n",
        "    response = requests.get(url)\n",
        "    response.raise_for_status()\n",
        "    print(f\"Arquivo de {ano} baixado com sucesso na memória\")\n",
        "    return response.text\n",
        "\n",
        "def carregar_csv_no_sqlite(ano, conn, tabela_nome='proposicoes'):\n",
        "    csv_text = baixar_arquivo_em_memoria(ano)\n",
        "    df = pd.read_csv(StringIO(csv_text))\n",
        "    # Opcional: adicionar uma coluna com o ano para identificar a origem\n",
        "    df['ano_arquivo'] = ano\n",
        "    df.to_sql(tabela_nome, conn, if_exists='append', index=False)\n",
        "    print(f\"Dados do ano {ano} adicionados na tabela '{tabela_nome}'\")\n",
        "\n",
        "conn = sqlite3.connect('proposicoes.db')\n",
        "anos = range(1980,2026)\n",
        "for ano in anos:\n",
        "    carregar_csv_no_sqlite(ano, conn)\n",
        "conn.close()\n",
        "```\n",
        "\n",
        "\n",
        "## R\n",
        "\n",
        "``` {.r}\n",
        "library(httr)\n",
        "library(readr)\n",
        "library(DBI)\n",
        "library(RSQLite)\n",
        "library(dplyr)\n",
        "\n",
        "baixar_arquivo_em_memoria <- function(ano) {\n",
        "  message(sprintf(\"Baixando arquivos de proposições para o ano de %d\", ano))\n",
        "  url <- sprintf(\"https://dadosabertos.almg.gov.br/arquivo/proposicoes/download?ano=%d&tipo=CSV\", ano)\n",
        "  response <- GET(url)\n",
        "  \n",
        "  if (http_error(response)) {\n",
        "    stop(\"Erro ao baixar o arquivo: \", status_code(response))\n",
        "  }\n",
        "  \n",
        "  message(sprintf(\"Arquivo de %d baixado com sucesso na memória\", ano))\n",
        "  content(response, \"text\", encoding = \"UTF-8\")\n",
        "}\n",
        "\n",
        "carregar_csv_no_sqlite <- function(ano, conn, tabela_nome = \"proposicoes\") {\n",
        "  csv_text <- baixar_arquivo_em_memoria(ano)\n",
        "  \n",
        "  df <- read_csv(I(csv_text), show_col_types = FALSE)\n",
        "  \n",
        "  # Opcional: adicionar coluna com o ano\n",
        "  df <- df %>%\n",
        "    mutate(ano_arquivo = ano)\n",
        "  \n",
        "  dbWriteTable(conn, tabela_nome, df, append = TRUE)\n",
        "  \n",
        "  message(sprintf(\"Dados do ano %d adicionados na tabela '%s'\", ano, tabela_nome))\n",
        "}\n",
        "\n",
        "# Conectar ao banco SQLite\n",
        "conn <- dbConnect(RSQLite::SQLite(), \"proposicoes.db\")\n",
        "\n",
        "# Iterar sobre os anos\n",
        "anos <- 1980:2025\n",
        "for (ano in anos) {\n",
        "  carregar_csv_no_sqlite(ano, conn)\n",
        "}\n",
        "\n",
        "# Fechar conexão\n",
        "dbDisconnect(conn)\n",
        "\n",
        "```\n",
        ":::\n",
        "\n",
        "# Exploração Inicial dos dados\n"
      ],
      "id": "4930b02e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import sys\n",
        "import os\n",
        "import sqlite3\n",
        "import locale\n",
        "\n",
        "locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')\n",
        "\n",
        "# Adiciona a raiz do projeto ao sys.path\n",
        "sys.path.append(os.path.abspath(os.path.join(os.getcwd(), '..')))\n",
        "\n",
        "from funcoes.utils import formatar_numero_brl\n",
        "\n",
        "from funcoes.Figuras import create_horizontal_bar_chart_go\n",
        "\n",
        "# Caminho para o database.db na raiz do projeto\n",
        "db_path = os.path.abspath(os.path.join(os.getcwd(), '../database.db'))\n",
        "\n",
        "# Conecta ao banco na raiz do projeto\n",
        "conn = sqlite3.connect(db_path)\n",
        "\n",
        "df = pd.read_sql_query(f\"SELECT * FROM proposicoes\", conn).sort_values('Ano', ascending=False, ignore_index=True)\n",
        "\n",
        "nr_proposicoes = formatar_numero_brl(len(df), casas_decimais=0)\n",
        "\n",
        "legislaturas = pd.read_sql_query(f\"SELECT * from legislaturas\", conn)\n",
        "\n",
        "legislaturas['dataInicio'] = pd.to_datetime(legislaturas['dataInicio'], format='%Y-%m-%d')\n",
        "\n",
        "# Fechar conexão\n",
        "conn.close()\n",
        "\n",
        "inicio_legislaturas_ano = legislaturas['dataInicio'].dt.year"
      ],
      "id": "6346ae21",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Delimitei para esta análise todo o período disponibilizado (1959-2025) resultando na coleta de `{python} nr_proposicoes` proposicões. A @tbl-proposicao apresenta uma amostra destes dados. Como informações básicas temos o tipo, número e ano da proposição, o resumo (Ementa), temas (Indexacao) e em que fase do processo legislativo se encontra a proposição.\n"
      ],
      "id": "782d086a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-proposicao\n",
        "#| tbl-cap: Amostra dos dados sobre proposições legislativas\n",
        "#| echo: false\n",
        "\n",
        "df.head()"
      ],
      "id": "tbl-proposicao",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Destaca-se ainda a coluna \"Autores\" que comporta um dicionário com a lista de parlamentares ou outro tipos entes que participaram da autoria da proposição. A tabela oference ainda link para download do texto completo.\n"
      ],
      "id": "6c77deae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-charts\n",
        "#| fig-cap: Charts\n",
        "#| fig-subcap:\n",
        "#|   - Teste\n",
        "#|   - Second\n",
        "#| layout-ncol: 2\n",
        "\n",
        "import numpy as np\n",
        "from funcoes.Figuras import create_line_chart_go, create_time_series_chart_go\n",
        "from funcoes.utils import preprocessar_proposicao_media_movel\n",
        "\n",
        "# Checar valores nulos\n",
        "\n",
        "valores_nulos_data = df[df['DataPublicacao'].isnull()]\n",
        "\n",
        "nr_valores_nulos_data = formatar_numero_brl(len(valores_nulos_data),casas_decimais=0)\n",
        "\n",
        "df['data'] = np.where(df['DataPublicacao'].notnull(), df['DataPublicacao'], df['DataAtualizacao'])\n",
        "\n",
        "df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y')\n",
        "\n",
        "df['ano'] = df['data'].dt.year\n",
        "\n",
        "contagem_ano = df['ano'].value_counts().reset_index()\n",
        "\n",
        "contagem_ano.columns = ['ano', 'contagem']\n",
        "\n",
        "contagem_ano.sort_values('ano', ignore_index=True, inplace=True)\n",
        "\n",
        "fig = create_line_chart_go(\n",
        "    data=contagem_ano,\n",
        "    x_col='ano',\n",
        "    y_col='contagem',\n",
        "    title='',\n",
        "    line_color='green',\n",
        "    line_width=3,\n",
        "    height=400\n",
        ")\n",
        "\n",
        "for ano in inicio_legislaturas_ano:\n",
        "    if ano >= 1959:\n",
        "      fig.add_shape(\n",
        "        type=\"line\",\n",
        "        x0=ano,\n",
        "        y0=0,\n",
        "        x1=ano,\n",
        "        y1=1,\n",
        "        xref='x',\n",
        "        yref='paper',\n",
        "        line=dict(color=\"red\", width=2, dash=\"dash\")\n",
        "    )\n",
        "\n",
        "proprosicao_media_movel = preprocessar_proposicao_media_movel(df, window=10)\n",
        "\n",
        "# Step 2: Create chart using the new function\n",
        "fig_media_movel = create_time_series_chart_go(\n",
        "    data=proprosicao_media_movel,\n",
        "    date_col='date',\n",
        "    value_col='total_propositions',\n",
        "    ma_col='moving_avg_5d',\n",
        "    title='',\n",
        "    height=500\n",
        ")\n",
        "\n",
        "for data in legislaturas['dataInicio']:\n",
        "  if data >= pd.Timestamp('1959-01-01'):\n",
        "    fig_media_movel.add_shape(\n",
        "        type=\"line\",\n",
        "        x0=data,\n",
        "        y0=0,\n",
        "        x1=data,\n",
        "        y1=1,\n",
        "        xref='x',\n",
        "        yref='paper',\n",
        "        line=dict(color=\"red\", width=2, dash=\"dash\")\n",
        "    )\n",
        "\n",
        "fig.show()\n",
        "fig_media_movel.show()"
      ],
      "id": "fig-charts",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Vamos então observar a evolução de proposições legislativas ao longo do tempo. Primeiramente foi necessário lidar com os dados faltantes, uma vez que há `{python} nr_valores_nulos_data` registros sem valores de data de publicação\n"
      ],
      "id": "061619e8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}