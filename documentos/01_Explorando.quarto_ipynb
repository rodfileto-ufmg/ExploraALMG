{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Importação dos dados das proposições legislativas\n",
        "\n",
        "Há duas formas principais para acessar os dados da ALMG. A primeira, mais simples, é o dowload direto dos arquivos csv estando atualmente disponíveis sete conjuntos: [**Legislação mineira**](https://dadosabertos.almg.gov.br/documentacao/arquivos/legislacao-mineira), [**Proposições**](https://dadosabertos.almg.gov.br/documentacao/arquivos/proposicoes), [**Tramitação de proposições**](https://dadosabertos.almg.gov.br/documentacao/arquivos/tramitacao-de-proposicoes), [**Deputados da atual legislatura**](https://dadosabertos.almg.gov.br/documentacao/arquivos/deputados-da-atual-legislatura), [**Deputados**](https://dadosabertos.almg.gov.br/documentacao/arquivos/deputados) desde a 8ª Legislatura e [**Verbas indenizatórias**](https://dadosabertos.almg.gov.br/documentacao/arquivos/verbas-indenizatorias).\n",
        "\n",
        "A segunda forma é por meio da *API*, que permite consultas mais personalizadas, com resultados no formato XML ou JSON. Para este projeto de análse exploratória, utilizei arquivos csv e dados obtidos via API em formato JSON. Por exemplo, os dados de proposições foram baixados como CSV, enquanto, enquanto dados sobre legislaturas[^1] foram extraídos por meio da API. Todos os arquivos foram armazenados em um banco de dados *SQLite* para posterior análise.\n",
        "\n",
        "[^1]: Incluem nesse conjunto a data de início, data de fim e data da eleição referente à cada legislatura."
      ],
      "id": "ab8c3a49"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Código para importar dados de proposições\"\n",
        "#| eval: false\n",
        "\n",
        "import requests\n",
        "import sqlite3\n",
        "import csv\n",
        "from io import StringIO\n",
        "\n",
        "def baixar_arquivo_em_memoria(ano):\n",
        "    print(f\"Baixando arquivos de proposições para o ano de {ano}\")\n",
        "    url = f\"https://dadosabertos.almg.gov.br/arquivo/proposicoes/download?ano={ano}&tipo=CSV\"\n",
        "    response = requests.get(url)\n",
        "    response.raise_for_status()\n",
        "    print(f\"Arquivo de {ano} baixado com sucesso na memória\")\n",
        "    return response.text\n",
        "\n",
        "def criar_tabela_proposicoes(conn):\n",
        "    cursor = conn.cursor()\n",
        "    cursor.execute('''\n",
        "        CREATE TABLE IF NOT EXISTS proposicoes (\n",
        "            Codigo TEXT PRIMARY KEY,\n",
        "            TipoProposicao TEXT,\n",
        "            SiglaTipoProposicao TEXT,\n",
        "            Numero TEXT,\n",
        "            Ano TEXT,\n",
        "            Ementa TEXT,\n",
        "            Indexacao TEXT,\n",
        "            Situacao TEXT,\n",
        "            DataPublicacao TEXT,\n",
        "            DataAtualizacao TEXT,\n",
        "            DataUltimaAcao TEXT,\n",
        "            Regime TEXT,\n",
        "            Resumo TEXT,\n",
        "            Origem TEXT,\n",
        "            Local TEXT,\n",
        "            NomeFaseAtual TEXT,\n",
        "            Legislatura TEXT,\n",
        "            Autores TEXT,\n",
        "            LinkTextos TEXT,\n",
        "            ano_arquivo INTEGER\n",
        "        )\n",
        "    ''')\n",
        "    conn.commit()\n",
        "\n",
        "def carregar_csv_no_sqlite(ano, conn):\n",
        "    csv_text = baixar_arquivo_em_memoria(ano)\n",
        "    csv_file = StringIO(csv_text)\n",
        "    reader = csv.DictReader(csv_file, delimiter=',')\n",
        "\n",
        "    cursor = conn.cursor()\n",
        "\n",
        "    for row in reader:\n",
        "        # Adiciona o ano na linha\n",
        "        row['ano_arquivo'] = ano\n",
        "\n",
        "        # Cria uma tupla com os valores na ordem correta\n",
        "        values = (\n",
        "            row.get('Codigo'),\n",
        "            row.get('TipoProposicao'),\n",
        "            row.get('SiglaTipoProposicao'),\n",
        "            row.get('Numero'),\n",
        "            row.get('Ano'),\n",
        "            row.get('Ementa'),\n",
        "            row.get('Indexacao'),\n",
        "            row.get('Situacao'),\n",
        "            row.get('DataPublicacao'),\n",
        "            row.get('DataAtualizacao'),\n",
        "            row.get('DataUltimaAcao'),\n",
        "            row.get('Regime'),\n",
        "            row.get('Resumo'),\n",
        "            row.get('Origem'),\n",
        "            row.get('Local'),\n",
        "            row.get('NomeFaseAtual'),\n",
        "            row.get('Legislatura'),\n",
        "            row.get('Autores'),\n",
        "            row.get('LinkTextos'),\n",
        "            row.get('ano_arquivo')\n",
        "        )\n",
        "\n",
        "        # Executa o insert ou replace\n",
        "        cursor.execute('''\n",
        "            INSERT OR REPLACE INTO proposicoes (\n",
        "                Codigo, TipoProposicao, SiglaTipoProposicao, Numero, Ano,\n",
        "                Ementa, Indexacao, Situacao, DataPublicacao, DataAtualizacao,\n",
        "                DataUltimaAcao, Regime, Resumo, Origem, Local, NomeFaseAtual,\n",
        "                Legislatura, Autores, LinkTextos, ano_arquivo\n",
        "            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n",
        "        ''', values)\n",
        "\n",
        "    conn.commit()\n",
        "    print(f\"Dados do ano {ano} adicionados/atualizados na tabela 'proposicoes'\")\n",
        "\n",
        "# Conectar ao banco SQLite\n",
        "conn = sqlite3.connect('database.db')\n",
        "\n",
        "# Criar tabela (se não existir)\n",
        "criar_tabela_proposicoes(conn)\n",
        "\n",
        "# Carregar dados de anos específicos\n",
        "anos = range(1980, 2026)\n",
        "for ano in anos:\n",
        "    carregar_csv_no_sqlite(ano, conn)\n",
        "\n",
        "# Fechar conexão\n",
        "conn.close()"
      ],
      "id": "9b9cc1a4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Código para importar dados de legislaturas\"\n",
        "#| eval: false\n",
        "\n",
        "import requests\n",
        "import sqlite3\n",
        "\n",
        "# URL do JSON\n",
        "url = \"https://dadosabertos.almg.gov.br/api/v2/legislaturas/lista?formato=json\"\n",
        "\n",
        "# Baixar o JSON\n",
        "response = requests.get(url)\n",
        "data = response.json()\n",
        "\n",
        "# Conectar ao banco SQLite (cria se não existir)\n",
        "conn = sqlite3.connect('database.db')\n",
        "cursor = conn.cursor()\n",
        "\n",
        "# Criar tabela legislaturas\n",
        "cursor.execute('''\n",
        "CREATE TABLE IF NOT EXISTS legislaturas (\n",
        "    id INTEGER PRIMARY KEY,\n",
        "    dataInicio TEXT,\n",
        "    dataTermino TEXT,\n",
        "    dataEleicao TEXT\n",
        ")\n",
        "''')\n",
        "\n",
        "# Inserir dados na tabela\n",
        "for item in data.get('listaLegislatura', []):\n",
        "    cursor.execute('''\n",
        "    INSERT OR REPLACE INTO legislaturas (id, dataInicio, dataTermino, dataEleicao)\n",
        "    VALUES (?, ?, ?, ?)\n",
        "    ''', (\n",
        "        item.get('id'),\n",
        "        item.get('dataInicio'),\n",
        "        item.get('dataTermino'),\n",
        "        item.get('dataEleicao')  # Pode ser None se não existir\n",
        "    ))\n",
        "\n",
        "# Salvar (commit) e fechar conexão\n",
        "conn.commit()\n",
        "conn.close()\n",
        "\n",
        "print(\"Dados inseridos com sucesso na tabela legislaturas.\")"
      ],
      "id": "f29fc231",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Exploração dos dados"
      ],
      "id": "0b3bc9c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "\n",
        "# Importações\n",
        "import pandas as pd\n",
        "import sys\n",
        "import os\n",
        "import sqlite3\n",
        "import locale\n",
        "\n",
        "# Configurações\n",
        "locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')\n",
        "\n",
        "# Adiciona a raiz do projeto ao sys.path\n",
        "sys.path.append(os.path.abspath(os.path.join(os.getcwd(), '..')))\n",
        "\n",
        "# Importações locais\n",
        "from funcoes.utils import formatar_numero_brl\n",
        "from funcoes.Figuras import create_horizontal_bar_chart_go\n",
        "\n",
        "# Configuração do banco de dados\n",
        "db_path = os.path.abspath(os.path.join(os.getcwd(), '../database.db'))\n",
        "\n",
        "# Conexão e consultas\n",
        "conn = sqlite3.connect(db_path)\n",
        "\n",
        "# Carrega dados das proposições\n",
        "df = pd.read_sql_query(\n",
        "    \"SELECT * FROM proposicoes\", \n",
        "    conn\n",
        ").sort_values('Ano', ascending=False, ignore_index=True)\n",
        "\n",
        "# Carrega dados das legislaturas\n",
        "legislaturas = pd.read_sql_query(\"SELECT * FROM legislaturas\", conn)\n",
        "\n",
        "# Fecha conexão\n",
        "conn.close()\n",
        "\n",
        "# Processamento dos dados\n",
        "nr_proposicoes = formatar_numero_brl(len(df), casas_decimais=0)\n",
        "\n",
        "legislaturas['dataInicio'] = pd.to_datetime(\n",
        "    legislaturas['dataInicio'], \n",
        "    format='%Y-%m-%d'\n",
        ")\n",
        "\n",
        "inicio_legislaturas_ano = legislaturas['dataInicio'].dt.year"
      ],
      "id": "44c707a2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A análise exploratória começa pelas proposições[^2]. Os dados abrangem o período de 1959-2025, totalizando `{python} nr_proposicoes` registros. A @tbl-proposicao apresenta uma amostra destes dados. Entre as informações básicas estão o tipo, número e ano da proposição, o resumo (Ementa), temas (Indexacao) e a fase atual do processo legislativo.\n",
        "\n",
        "[^2]: Uma \"proposição\" refere-se a qualquer matéria que está em tramitação na ALMG. Inclui diversos tipos de documentos como projetos de lei, projetos de lei complementar, propostas de emenda à constituição, projetos de resolução, vetos, indicações e requerimentos.\n",
        "\n",
        "Na tabela de proposições destaco ainda a coluna \"Autores\", que contém um dicionário com a identificação dos parlamentares ou entidades participaram da autoria da proposição. Esta informação é útil para estudos de redes de co-autoria, permitindo identificar conexões políticas, sociais e possíveis hierarquias entre os parlamentares. \n",
        "\n",
        "Alémd disso, a tabela oferece ainda link para download dos textos completos das proposição. Esses arquivos possibilitam análises qualitativas, como a análise do discurso, e quantitativas por meio da mineração de texto. Isso permite identificar o perfil ideológico dos parlamentares, individualmente ou em grupos, e revelar os principais temas debatidos na Casa Legislativa.\n",
        "\n",
        "## Contagem de proposições por tipo"
      ],
      "id": "60897cac"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-proposicao\n",
        "#| tbl-cap: Amostra dos dados sobre proposições legislativas\n",
        "#| echo: false\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "proposicao_tipo = pd.DataFrame({\n",
        "    'count': df.TipoProposicao.value_counts(),\n",
        "    'prop': df.TipoProposicao.value_counts(normalize=True)\n",
        "})\n",
        "\n",
        "# Substituir categorias com proporção < 1% por 'Outras'\n",
        "new_index = np.where(proposicao_tipo['prop'] < 0.01, 'Outras', proposicao_tipo.index)\n",
        "\n",
        "proposicao_tipo.index = new_index\n",
        "\n",
        "# Agrupar somando os counts e props das categorias repetidas\n",
        "proposicao_tipo = proposicao_tipo.groupby(proposicao_tipo.index).sum()\n",
        "\n",
        "# Limpar e formatar categorias: strip e title case\n",
        "proposicao_tipo.index = proposicao_tipo.index.str.strip().str.title()\n",
        "\n",
        "# Ordenar\n",
        "proposicao_tipo = proposicao_tipo.sort_values('count', ascending=True)\n",
        "\n",
        "# Transformar index em coluna\n",
        "proposicao_tipo = proposicao_tipo.reset_index().rename(columns={'index': 'TipoProposicao'})\n",
        "\n",
        "nr_pl = proposicao_tipo.loc[proposicao_tipo['TipoProposicao'] == 'Projeto De Lei', 'count'].values[0]\n",
        "\n",
        "prop_pl = proposicao_tipo.loc[proposicao_tipo['TipoProposicao'] == 'Projeto De Lei', 'prop'].values[0] * 100\n",
        "\n",
        "\n",
        "nr_rn = proposicao_tipo.loc[proposicao_tipo['TipoProposicao'] == 'Requerimento Numerado', 'count'].values[0]\n",
        "\n",
        "prop_rn = proposicao_tipo.loc[proposicao_tipo['TipoProposicao'] == 'Requerimento Numerado', 'prop'].values[0] * 100\n",
        "\n",
        "\n",
        "nr_pl = formatar_numero_brl(nr_pl, casas_decimais=0)\n",
        "\n",
        "prop_pl = formatar_numero_brl(prop_pl, casas_decimais=2)\n",
        "\n",
        "nr_rn = formatar_numero_brl(nr_rn, casas_decimais=0)\n",
        "\n",
        "prop_rn = formatar_numero_brl(prop_rn, casas_decimais=2)\n",
        "\n",
        "df.head()"
      ],
      "id": "tbl-proposicao",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Para finalizar essa parte introdutória na @fig-tipo-proposicao uma contagem dos tipos de proposição. Importante destacar que, embora os projetos de lei tenham grande representatividade, respondendo com `{python} nr_pl` (cerca de `{python} prop_pl`), eles são superados pelos Requerimentos Numerados, que representam o tipo de proposição mais recorrente, com `{python} nr_rn` (cerca de `{python} prop_pl`% do total).\n",
        "\n",
        "Essa informação é relevante, considerando que a literatura frequentemente foca os projetos de lei como principal objeto de análise. É o caso por exemplo, de Fowler [-@fowler2006] em que a rede de coautoria é construída com base nos projetos de lei, a fim de gerar indicadores de influência legislativa. Considero que, embora a proposição de projetos de lei seja um importante indicativo da atuação\n",
        "parlamentar e de seu perfil ideológico, não se deve negligenciar os demais tipos de proposição pois estes podem apresentar outras perspectivas da atividade legislativa."
      ],
      "id": "4033f427"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| label: fig-tipo-proposicao\n",
        "#| fig-cap: Contagem de proposições por tipo\n",
        "#| echo: false\n",
        "\n",
        "# Plotar gráfico horizontal\n",
        "fig = create_horizontal_bar_chart_go(\n",
        "    proposicao_tipo, 'count', 'TipoProposicao',\n",
        "    title='', show_percentages=True, bar_color='blue'\n",
        ")\n",
        "\n",
        "fig.show()\n"
      ],
      "id": "fig-tipo-proposicao",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Evolução temporal do protocolo de proposições\n",
        "\n",
        "Vamos observar agora a evolução das proposições legislativas ao longo do tempo. Haveria algum período específico em que os deputados e deputadas apresentam maior propensão a protocolar projetos de lei ou outros requerimentos? Para responder a essa pergunta, analisei os dados com base na data de protocolo das proposições legislativas. Não apliquei filtros quanto ao tipo de proposição nem quanto ao período, visando a uma\n",
        "visualização ampla e geral.\n",
        "\n",
        "A contagem foi agrupada mensalmente com a contagem bruta e média móvel de 03 meses estão na @fig-evolucao-temporal. Também inseri linhas verticais pontilhadas indicando o início de cada legislatura.\n",
        "\n",
        "Destaco como principal ponto o pico de proposições no primeiro ano de cada legislatura, um fenômeno que se torna visualmente mais evidente a partir de 1987. Isso revela uma interessante avenida de pesquisa: por meio de métodos quantitativos, seria possível realizar análises estatísticas de séries temporais para identificar picos e sazonalidades de forma mais robusta, além de investigar possíveis causas para essas variações. Alternativamente, abordagens qualitativas poderiam explorar através da análise as razões para o aumento de proposições no primeiro ano de mandato."
      ],
      "id": "3c849f02"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| label: fig-evolucao-temporal\n",
        "#| fig-cap: Número de proposições mensais\n",
        "#| echo: false\n",
        "\n",
        "import numpy as np\n",
        "import plotly.graph_objects as go\n",
        "from funcoes.Figuras import create_line_chart_go, create_time_series_chart_go\n",
        "from funcoes.utils import preprocessar_proposicao_media_movel, preprocessar_proposicao_media_movel_mensal\n",
        "\n",
        "# Checar valores nulos\n",
        "\n",
        "valores_nulos_data = df[df['DataPublicacao'].isnull()]\n",
        "\n",
        "nr_valores_nulos_data = formatar_numero_brl(len(valores_nulos_data),casas_decimais=0)\n",
        "\n",
        "df['data'] = np.where(df['DataPublicacao'].notnull(), df['DataPublicacao'], df['DataAtualizacao'])\n",
        "\n",
        "df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y')\n",
        "\n",
        "proprosicao_media_movel = preprocessar_proposicao_media_movel_mensal(df, window=3)\n",
        "\n",
        "# Step 2: Create chart using the new function\n",
        "fig_media_movel = create_time_series_chart_go(\n",
        "    data=proprosicao_media_movel,\n",
        "    show_slider=True,\n",
        "    date_col='month',\n",
        "    value_col='total_propositions',\n",
        "    ma_col='moving_avg',\n",
        "    title='',\n",
        "    extra_months=1,\n",
        "    height=500\n",
        ")\n",
        "\n",
        "# Adiciona linhas tracejadas verticais para as legislaturas\n",
        "for i, row in legislaturas.iterrows():\n",
        "    data_inicio = row['dataInicio']\n",
        "    \n",
        "    if data_inicio >= pd.Timestamp('1959-01-01'):\n",
        "        fig_media_movel.add_vline(\n",
        "            x=data_inicio,\n",
        "            line=dict(color=\"red\", width=1.5, dash=\"dash\"),\n",
        "            layer=\"below\"\n",
        "        )\n",
        "\n",
        "# Adiciona item na legenda para \"Início de Legislatura\"\n",
        "fig_media_movel.add_trace(\n",
        "    go.Scatter(\n",
        "        x=[None], y=[None],\n",
        "        mode='lines',\n",
        "        line=dict(color=\"red\", width=1.5, dash=\"dash\"),\n",
        "        name=\"Início de Legislatura\"\n",
        "    )\n",
        ")\n",
        "\n",
        "\n",
        "fig_media_movel.show()"
      ],
      "id": "fig-evolucao-temporal",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/media/mynewdrive/Blog_ALMG/env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}